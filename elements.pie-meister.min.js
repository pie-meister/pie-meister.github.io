customElements.define(
  "pie-chart",
  class extends HTMLElement {
    connectedCallback() {
      this.svg(this.attachShadow({ mode: "open" }));
    }
    svg(
      t,
      e = (this.getAttribute("stroke") || "#e24,#2a4,#f92,#46e,#fe2,#4ef")
        .split`,`,
      i = ~~this.getAttribute("pull"),
      s = ~~this.getAttribute("gap"),
      r = 0,
      l = "http://www.w3.org/2000/svg",
      n = 0
    ) {
      setTimeout(() => {
        t.innerHTML = `<style>:host{display:inline-block}svg{width:100%}</style><svg id=${
          this.id
        } xmlns=${l} viewBox="0 0 ${1e3 + i} ${1e3 + i}">${
          this.innerHTML
        }</svg>`;
        this.slices = [...t.querySelectorAll("slice")].map((t, u) => {
          let a = t.getAttribute("size"),
            h = ~~a.replace("%", ""),
            o =
              ~~t.getAttribute("stroke-width") ||
              ~~this.getAttribute("stroke-width") ||
              500 + i / 2 - i,
            b = r,
            g = (
              s,
              r = o,
              u = h,
              a = t.getAttribute("stroke") || (0 == s && e.shift()),
              g = (500 + i / 2) / 2 -
                i / 2 +
                s -
                ("stroke-width" == this.getAttribute("fill")
                  ? (500 - i / 2 - r) / 2
                  : 0),
              A = document.createElementNS(l, "path"),
              p = "pie1" == this.id ? void 0 : ""
            ) => (
              A.setAttribute("stroke", a),
              A.setAttribute("stroke-width", r),
              A.setAttribute("pathLength", n),
              A.setAttribute("stroke-dasharray", u + " " + (n - u)),
              A.setAttribute(
                "d",
                `m${500 + i / 2} ${500 + i / 2}m0 ${-g}a2 2 0 000 ${
                  2 * g
                }a2 2 0 000-${2 * g}`
              ),
              A.setAttribute("fill", "none"),
              (A.point = () =>
                A.getPointAtLength(
                  A.getTotalLength() - (A.getTotalLength() / n) * (b + u / 2)
                )),
              A
            );
          h == a
            ? n ||
              [...this.querySelectorAll("slice")].map(
                (t) => (n += ~~t.getAttribute("size") + s)
              )
            : (n = ~~this.getAttribute("size") || 100);
          h || ((h = n - r), (a = h + "%"));
          let A = g(0),
            p = g(~~this.getAttribute("text") || 60).point(),
            c = document.createElementNS(l, "g"),
            d = document.createElementNS(l, "text"),
            m = A.point();
          c.path = A;
          c.create = g;
          c.onmouseout = () => (
            (this.g = c), this.dispatchEvent(new Event("slice"))
          );
          c.onmouseover = () => (
            (this.g = c), this.dispatchEvent(new Event("slice"))
          );
          c.setAttribute("size", a);
          c.setAttribute("slice", u + 1);
          c.setAttribute(
            "label",
            (d.innerHTML = this.querySelector("style")
              ? (t.innerHTML && t.innerHTML.replace("size", a)) || a
              : "")
          );
          A.setAttribute("stroke-dashoffset", (r += h + s));
          [...t.attributes].map((t) => A.setAttribute(t.name, t.value));
          d.setAttribute("y", p.y + ~~t.getAttribute("y"));
          d.setAttribute("x", p.x + ~~t.getAttribute("x"));
          c.append(A, d);
          t.parentNode.replaceChild(c, t);
          c.pull = (
            e,
            s = Math.abs(~~t.getAttribute("pull") || i),
            r = g(s + 1).point()
          ) =>
            c.setAttribute(
              "transform",
              (c.pulled = e) ? `translate(${r.x - m.x} ${r.y - m.y})` : ""
            );
          c.pull(t.hasAttribute("pull"));
          return c;
        });
      });
    }
  }
);
